{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport strings from \"../strings.json\";\nimport Button from \"../components/Button\";\nimport { useState, Fragment, useRef } from \"react\";\nimport Input from \"../components/Input\";\nimport SignaturePad from \"../components/SignaturePad\";\nexport default (props => {\n  const formEl = useRef(null);\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const {\n    0: download,\n    1: setDownload\n  } = useState(false);\n  const {\n    0: fullName1,\n    1: setFullName1\n  } = useState(\"\");\n  const {\n    0: fullName2,\n    1: setFullName2\n  } = useState(\"\");\n  const {\n    0: fullName3,\n    1: setFullName3\n  } = useState(\"\");\n  const {\n    0: IDNumber1,\n    1: setIDNumber1\n  } = useState(\"\");\n  const {\n    0: IDNumber2,\n    1: setIDNumber2\n  } = useState(\"\");\n  const {\n    0: IDNumber3,\n    1: setIDNumber3\n  } = useState(\"\");\n  const {\n    0: accountVisible1,\n    1: setAccountVisible1\n  } = useState(false);\n  const {\n    0: accountVisible2,\n    1: setAccountVisible2\n  } = useState(false);\n  const {\n    0: signature,\n    1: setSignature\n  } = useState(\"\");\n  const {\n    0: loanType,\n    1: setLoanType\n  } = useState(\"\");\n  const {\n    0: loanNumbers,\n    1: setLoanNumbers\n  } = useState(\"\");\n  const {\n    0: bankAccountNumber,\n    1: setBankAccountNumber\n  } = useState(\"\");\n  const {\n    0: nearMortgageDate,\n    1: setNearMortgageDate\n  } = useState(\"\");\n  const {\n    0: phoneNumber,\n    1: setPhoneNumber\n  } = useState(\"\");\n\n  function addAccountOwner() {\n    if (!accountVisible1) {\n      setFullName2(\"\");\n      setIDNumber2(\"\");\n      return setAccountVisible1(true);\n    }\n\n    if (!accountVisible2) {\n      setFullName3(\"\");\n      setIDNumber3(\"\");\n      return setAccountVisible2(true);\n    }\n  }\n\n  function processPdfDocument(_download) {\n    setDownload(_download ? \"1\" : \"0\");\n    formEl.current.submit();\n  }\n\n  return __jsx(Fragment, null, __jsx(\"form\", {\n    style: {\n      display: \"none\"\n    },\n    ref: formEl,\n    method: \"POST\",\n    target: \"_blank\",\n    action: \"https://api.coronaforms.org/api/v1/pdf/leumi\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"full_name\",\n    value: fullName1\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"full_name_2\",\n    value: fullName2\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"full_name_3\",\n    value: fullName3\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"id\",\n    value: IDNumber1\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"id_2\",\n    value: IDNumber2\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"id_3\",\n    value: IDNumber3\n  }), loanType === \"all_loans\" && __jsx(\"input\", {\n    type: \"text\",\n    name: \"all_loans\",\n    value: \"1\"\n  }), loanType === \"specific_loans\" && __jsx(\"input\", {\n    type: \"text\",\n    name: \"specific_loans\",\n    value: \"1\"\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"loans_numbers\",\n    value: loanNumbers\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"bank_account_number\",\n    value: bankAccountNumber\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"near_mortgage_date\",\n    value: nearMortgageDate\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"phone_number\",\n    value: phoneNumber\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"sig\",\n    value: signature\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"current_date\",\n    value: \"1\"\n  }), __jsx(\"input\", {\n    type: \"text\",\n    name: \"download\",\n    value: download\n  })), step === 0 && __jsx(Fragment, null, __jsx(\"h1\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.Accounts.title), __jsx(\"h2\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.Accounts.subtitle), __jsx(\"form\", {\n    onSubmit: () => setStep(1)\n  }, __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    autoFocus: true,\n    required: true,\n    value: fullName1,\n    onChange: e => setFullName1(e.target.value),\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.FullName\n  }), __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    required: true,\n    value: IDNumber1,\n    onChange: e => setIDNumber1(e.target.value),\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.IDNumber\n  }), accountVisible1 && __jsx(\"div\", {\n    className: \"mt-2 name_and_id\"\n  }, __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    required: true,\n    value: fullName2,\n    onChange: e => setFullName2(e.target.value),\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.FullName\n  }), __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    required: true,\n    value: IDNumber2,\n    onChange: e => setIDNumber2(e.target.value),\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.IDNumber\n  }), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    onClick: () => setAccountVisible1(false)\n  }, strings[props.language].Common.Remove)), accountVisible2 && __jsx(\"div\", {\n    className: \"mt-2 mb-2 name_and_id\"\n  }, __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    required: true,\n    value: fullName3,\n    onChange: e => setFullName3(e.target.value),\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.FullName\n  }), __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    required: true,\n    value: IDNumber3,\n    onChange: e => setIDNumber3(e.target.value),\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.IDNumber\n  }), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    onClick: () => setAccountVisible2(false)\n  }, strings[props.language].Common.Remove)), __jsx(\"div\", {\n    className: \"mt-2\"\n  }, (!accountVisible1 || !accountVisible2) && __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    onClick: addAccountOwner,\n    type: \"button\"\n  }, strings[props.language].Common.AddAccountOwner), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    arrow: true\n  }, strings[props.language].Common.Next)))), step === 1 && __jsx(Fragment, null, __jsx(\"h1\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.MortgageTypeSelection.title), __jsx(\"h2\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.MortgageTypeSelection.subtitle), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    arrow: true,\n    onClick: () => (setLoanType(\"all_loans\"), setStep(3))\n  }, strings[props.language].Common.AllMyMortgageLoans), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    onClick: () => (setLoanType(\"specific_loans\"), setStep(2))\n  }, strings[props.language].Common.ChooseMortgageLoans)), step === 2 && __jsx(Fragment, null, __jsx(\"form\", {\n    onSubmit: () => setStep(3)\n  }, __jsx(\"h1\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.MortgageLoanNumbers.title), __jsx(\"h2\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.MortgageLoanNumbers.subtitle), __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    autoFocus: true,\n    value: loanNumbers,\n    onChange: e => setLoanNumbers(e.target.value),\n    required: true,\n    className: \"field not-round\",\n    label: strings[props.language].Common.LoanNumbers\n  }), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    className: \"mt-2\",\n    arrow: true\n  }, strings[props.language].Common.Next))), step === 3 && __jsx(Fragment, null, __jsx(\"form\", {\n    onSubmit: () => setStep(4)\n  }, __jsx(\"h1\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.BankAndContactInforamtion.title), __jsx(\"h2\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.BankAndContactInforamtion.subtitle), __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    autoFocus: true,\n    value: bankAccountNumber,\n    onChange: e => setBankAccountNumber(e.target.value),\n    required: true,\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.BankAccountNumber\n  }), __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    value: nearMortgageDate,\n    onChange: e => setNearMortgageDate(e.target.value),\n    label: strings[props.language].Forms.BankAndContactInforamtion.NextMortgagePaymentDate,\n    type: \"date\",\n    required: true,\n    className: \"field not-round\"\n  }), __jsx(Input, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    value: phoneNumber,\n    onChange: e => setPhoneNumber(e.target.value),\n    required: true,\n    className: \"field not-round\",\n    placeholder: strings[props.language].Common.PhoneNumber\n  }), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    className: \"mt-2\",\n    arrow: true,\n    onClick: () => setStep(3)\n  }, strings[props.language].Common.Next))), step === 4 && __jsx(Fragment, null, __jsx(\"h1\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.Signature.title), __jsx(\"h2\", {\n    className: \"mb-2\"\n  }, strings[props.language].Forms.Signature.subtitle), __jsx(SignaturePad, {\n    language: props.language,\n    onChange: signatureDataURL => setSignature(signatureDataURL)\n  }), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    onClick: () => processPdfDocument(false),\n    className: \"mt-2\",\n    arrow: true\n  }, strings[props.language].Common.PreviewRequest), __jsx(Button, {\n    rtl: props.language === \"hebrew\" ? true : false,\n    onClick: () => processPdfDocument(true),\n    className: \"mt-2\",\n    arrow: true\n  }, strings[props.language].Common.Download)));\n});","map":null,"metadata":{},"sourceType":"module"}