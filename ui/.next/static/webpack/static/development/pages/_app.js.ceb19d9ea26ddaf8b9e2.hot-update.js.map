{"version":3,"file":"static/webpack/static/development/pages/_app.js.ceb19d9ea26ddaf8b9e2.hot-update.js","sources":["webpack:///./components/LeumiForm.js"],"sourcesContent":["import strings from \"../strings.json\";\nimport Button from \"../components/Button\";\nimport { useState, Fragment, useRef } from \"react\";\nimport Input from \"../components/Input\";\nimport SignaturePad from \"../components/SignaturePad\";\n\nexport default (props) => {\n    const formEl = useRef(null);\n    const [step, setStep] = useState(3);\n    const [download, setDownload] = useState(false);\n    const [fullName1, setFullName1] = useState(\"\");\n    const [fullName2, setFullName2] = useState(\"\");\n    const [fullName3, setFullName3] = useState(\"\");\n\n    const [IDNumber1, setIDNumber1] = useState(\"\");\n    const [IDNumber2, setIDNumber2] = useState(\"\");\n    const [IDNumber3, setIDNumber3] = useState(\"\");\n\n    const [accountVisible1, setAccountVisible1] = useState(false);\n    const [accountVisible2, setAccountVisible2] = useState(false);\n\n    const [signature, setSignature] = useState(\"\");\n    const [loanType, setLoanType] = useState(\"\");\n    const [loanNumbers, setLoanNumbers] = useState(\"\");\n\n    const [bankAccountNumber, setBankAccountNumber] = useState(\"\");\n    const [nearMortgageDate, setNearMortgageDate] = useState(\"\");\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n\n    function addAccountOwner() {\n        if (!accountVisible1) {\n            setFullName2(\"\");\n            setIDNumber2(\"\");\n            return setAccountVisible1(true);\n        }\n        if (!accountVisible2) {\n            setFullName3(\"\");\n            setIDNumber3(\"\");\n            return setAccountVisible2(true);\n        }\n    }\n\n    function setStepOnSubmit(event, stepValue) {\n        event.preventDefault();\n        setStep(stepValue);\n    }\n\n    function processPdfDocument(_download) {\n        setDownload(_download ? \"1\" : \"0\");\n        setTimeout(() => {\n            formEl.current.submit();\n        }, 100);\n    }\n\n    return <Fragment>\n        <form style={{ display: \"none\" }} ref={formEl} method=\"POST\" target=\"_blank\" action=\"https://api.coronaforms.org/api/v1/pdf/leumi\">\n            <input type=\"text\" name=\"full_name\" value={fullName1} />\n            <input type=\"text\" name=\"full_name_2\" value={fullName2} />\n            <input type=\"text\" name=\"full_name_3\" value={fullName3} />\n            <input type=\"text\" name=\"id\" value={IDNumber1} />\n            <input type=\"text\" name=\"id_2\" value={IDNumber2} />\n            <input type=\"text\" name=\"id_3\" value={IDNumber3} />\n            {loanType === \"all_loans\" && <input type=\"text\" name=\"all_loans\" value=\"1\" />}\n            {loanType === \"specific_loans\" && <input type=\"text\" name=\"specific_loans\" value=\"1\" />}\n            <input type=\"text\" name=\"loans_numbers\" value={loanNumbers} />\n            <input type=\"text\" name=\"bank_account_number\" value={bankAccountNumber} />\n            <input type=\"text\" name=\"near_mortgage_date\" value={nearMortgageDate} />\n            <input type=\"text\" name=\"phone_number\" value={phoneNumber} />\n            <input type=\"text\" name=\"sig\" value={signature} />\n            <input type=\"text\" name=\"current_date\" value=\"1\" />\n            <input type=\"text\" name=\"download\" value={download} />\n        </form>\n        {step === 0 && <Fragment>\n            <h1 className=\"mb-2\">{strings[props.language].Forms.Accounts.title}</h1>\n            <h2 className=\"mb-2\">{strings[props.language].Forms.Accounts.subtitle}</h2>\n            <form onSubmit={(e) => setStepOnSubmit(e, 1)}>\n                <Input rtl={props.language === \"hebrew\" ? true : false} autoFocus required value={fullName1} onChange={e => setFullName1(e.target.value)} className=\"field not-round\" placeholder={strings[props.language].Common.FullName} />\n                <Input rtl={props.language === \"hebrew\" ? true : false} required value={IDNumber1} onChange={e => setIDNumber1(e.target.value)} className=\"field not-round\" placeholder={strings[props.language].Common.IDNumber} />\n                {accountVisible1 && <div className=\"mt-2 name_and_id\">\n                    <Input rtl={props.language === \"hebrew\" ? true : false} required value={fullName2} onChange={e => setFullName2(e.target.value)} className=\"field not-round\" placeholder={strings[props.language].Common.FullName} />\n                    <Input rtl={props.language === \"hebrew\" ? true : false} required value={IDNumber2} onChange={e => setIDNumber2(e.target.value)} className=\"field not-round\" placeholder={strings[props.language].Common.IDNumber} />\n                    <Button rtl={props.language === \"hebrew\" ? true : false} onClick={() => setAccountVisible1(false)}>{strings[props.language].Common.Remove}</Button>\n                </div>}\n                {accountVisible2 && <div className=\"mt-2 mb-2 name_and_id\">\n                    <Input rtl={props.language === \"hebrew\" ? true : false} required value={fullName3} onChange={e => setFullName3(e.target.value)} className=\"field not-round\" placeholder={strings[props.language].Common.FullName} />\n                    <Input rtl={props.language === \"hebrew\" ? true : false} required value={IDNumber3} onChange={e => setIDNumber3(e.target.value)} className=\"field not-round\" placeholder={strings[props.language].Common.IDNumber} />\n                    <Button rtl={props.language === \"hebrew\" ? true : false} onClick={() => setAccountVisible2(false)}>{strings[props.language].Common.Remove}</Button>\n                </div>}\n                <div className=\"mt-2\">\n                    {(!accountVisible1 || !accountVisible2) && <Button rtl={props.language === \"hebrew\" ? true : false} onClick={addAccountOwner} type=\"button\">{strings[props.language].Common.AddAccountOwner}</Button>}\n                    <Button rtl={props.language === \"hebrew\" ? true : false} arrow>{strings[props.language].Common.Next}</Button>\n                </div>\n            </form>\n        </Fragment>}\n        {step === 1 && <Fragment>\n            <h1 className=\"mb-2\">{strings[props.language].Forms.MortgageTypeSelection.title}</h1>\n            <h2 className=\"mb-2\">{strings[props.language].Forms.MortgageTypeSelection.subtitle}</h2>\n            <Button rtl={props.language === \"hebrew\" ? true : false} arrow onClick={() => (setLoanType(\"all_loans\"), setStep(3))}>{strings[props.language].Common.AllMyMortgageLoans}</Button>\n            <Button rtl={props.language === \"hebrew\" ? true : false} onClick={() => (setLoanType(\"specific_loans\"), setStep(2))}>{strings[props.language].Common.ChooseMortgageLoans}</Button>\n        </Fragment>}\n        {step === 2 && <Fragment>\n            <form onSubmit={(e) => setStepOnSubmit(e, 3)}>\n                <h1 className=\"mb-2\">{strings[props.language].Forms.MortgageLoanNumbers.title}</h1>\n                <h2 className=\"mb-2\">{strings[props.language].Forms.MortgageLoanNumbers.subtitle}</h2>\n                <Input rtl={props.language === \"hebrew\" ? true : false} autoFocus value={loanNumbers} onChange={e => setLoanNumbers(e.target.value)} required className=\"field not-round\" label={strings[props.language].Common.LoanNumbers} />\n                <Button rtl={props.language === \"hebrew\" ? true : false} className=\"mt-2\" arrow>{strings[props.language].Common.Next}</Button>\n            </form>\n        </Fragment>}\n        {step === 3 && <Fragment>\n            <form onSubmit={(e) => setStepOnSubmit(e, 4)}>\n                <h1 className=\"mb-2\">{strings[props.language].Forms.BankAndContactInforamtion.title}</h1>\n                <h2 className=\"mb-2\">{strings[props.language].Forms.BankAndContactInforamtion.subtitle}</h2>\n                <Input rtl={props.language === \"hebrew\" ? true : false} autoFocus value={bankAccountNumber} onChange={e => setBankAccountNumber(e.target.value)} required className=\"field not-round\" placeholder={strings[props.language].Common.BankAccountNumber} />\n                <Input rtl={props.language === \"hebrew\" ? true : false} value={nearMortgageDate} onChange={e => setNearMortgageDate(e.target.value)} label={strings[props.language].Forms.BankAndContactInforamtion.NextMortgagePaymentDate} type=\"date\" required className=\"field not-round\" />\n                <Input rtl={props.language === \"hebrew\" ? true : false} value={phoneNumber} onChange={e => setPhoneNumber(e.target.value)} required className=\"field not-round\" placeholder={strings[props.language].Common.PhoneNumber} />\n                <Button rtl={props.language === \"hebrew\" ? true : false} className=\"mt-2\" arrow onClick={() => setStep(3)}>{strings[props.language].Common.Next}</Button>\n            </form>\n        </Fragment>}\n        {step === 4 && <Fragment>\n            <h1 className=\"mb-2\">{strings[props.language].Forms.Signature.title}</h1>\n            <h2 className=\"mb-2\">{strings[props.language].Forms.Signature.subtitle}</h2>\n            <SignaturePad language={props.language} onChange={signatureDataURL => setSignature(signatureDataURL)} />\n            <Button rtl={props.language === \"hebrew\" ? true : false} onClick={() => processPdfDocument(false)} className=\"mt-2\" arrow>{strings[props.language].Common.PreviewRequest}</Button>\n            <Button rtl={props.language === \"hebrew\" ? true : false} onClick={() => processPdfDocument(true)} className=\"mt-2\" arrow>{strings[props.language].Common.Download}</Button>\n        </Fragment>}\n    </Fragment>\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAssourceRoot":""}